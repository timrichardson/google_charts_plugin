# -*- coding: utf-8 -*-
# this file is released under public domain and you can use without limitations

#########################################################################
## This is a sample controller
## - index is the default action of any application
## - user is required for authentication and authorization
## - download is for downloading files uploaded in the db (does streaming)
## - call exposes all registered services (none by default)
#########################################################################


def index():
    """
    example action using the internationalization operator T and flash
    rendered by views/default/index.html or views/generic.html

    if you need a simple wiki simple replace the two lines below with:
    return auth.wiki()
    """
    response.flash = T("Welcome to web2py!")
    return dict(message=T('Hello World'))


def user():
    """
    exposes:
    http://..../[app]/default/user/login
    http://..../[app]/default/user/logout
    http://..../[app]/default/user/register
    http://..../[app]/default/user/profile
    http://..../[app]/default/user/retrieve_password
    http://..../[app]/default/user/change_password
    http://..../[app]/default/user/manage_auth
    use @auth.requires_login()
        @auth.requires_membership('group name')
        @auth.requires_permission('read','table name',record_id)
    to decorate functions that need access control
    """
    if request.args(0) == 'manage':
        if len(request.args) == 1:
            auth.requires_membership(auth.settings.manager_group)(lambda: None)()
            return dict()
        if not URL.verify(request, user_signature=True, hash_vars=False):
            raise HTTP(403)
        table = request.args(1)
        formname = '%s_grid' % table
        if table == auth.settings.table_user_name:
            auth.settings.table_user._plural = T('Users')
            auth.settings.table_membership._plural = T('Roles')
            auth.settings.table_membership._id.readable = False
            auth.settings.table_membership.user_id.label = T('User')
            auth.settings.table_membership.group_id.label = T('Role')
            grid = SQLFORM.smartgrid(db[table], args=request.args[:2], user_signature=True,
                                     linked_tables=[auth.settings.table_membership_name],
                                     maxtextlength=1000, formname=formname)
        else:
            db[table]._id.readable = False
            auth.settings.table_permission.group_id.label = T('Role')
            auth.settings.table_permission.name.label = T('Permission')
            orderby = 'role' if table == auth.settings.table_group_name else 'group_id'
            grid = SQLFORM.grid(db[table], args=request.args[:2], orderby=db[table][orderby],
                                user_signature=True, maxtextlength=1000, formname=formname)
        return dict(grid=grid)
    else:
        return dict(form=auth())


@cache.action()
def download():
    """
    allows downloading of uploaded files
    http://..../[app]/default/download/[filename]
    """
    return response.download(request, db)


def call():
    """
    exposes services. for example:
    http://..../[app]/default/call/jsonrpc
    decorate with @services.jsonrpc the functions to expose
    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv
    """
    return service()


@auth.requires_signature()
def data():
    """
    http://..../[app]/default/data/tables
    http://..../[app]/default/data/create/[table]
    http://..../[app]/default/data/read/[table]/[id]
    http://..../[app]/default/data/update/[table]/[id]
    http://..../[app]/default/data/delete/[table]/[id]
    http://..../[app]/default/data/select/[table]
    http://..../[app]/default/data/search/[table]
    but URLs must be signed, i.e. linked with
      A('table',_href=URL('data/tables',user_signature=True))
    or with the signed load operator
      LOAD('default','data.load',args='tables',ajax=True,user_signature=True)
    """
    return dict(form=crud())
